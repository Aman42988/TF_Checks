name: SpringBoot Application CI and CD

# Only trigger, when the build workflow succeeded
on:
  repository_dispatch:
       types: [springbootworkflow]
 
 
jobs:
  build:
    permissions:
      id-token: write    # Job to connect to Identity Token to receive the token
      contents: read     # Read access to the repository
    runs-on: ubuntu-latest
       
    steps:
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v3 

      
    - name: Connecting GitHub Actions To AWS Using OIDC - Roles
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: github-actions-session
        
   # Install Java (JDK)
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
     
   # Gradle commands
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Gradle Clean
      run: ./gradlew clean
      
    - name: Gradle Build
      run: ./gradlew build
      
   # Public IP of Github Actions (SonarQube EC2)
    - name: Public IP of Github Hosted Runner
      id: ip
      uses: haythem/public-ip@v1.3
      
    - name: Add Github Actions IP to Security group
      id: sonarqube-security-group-id
      run: |
         sonarqube_sg_id=`aws ec2 describe-security-groups --group-names ${{ secrets.AWS_EC2_SG_NAME }} --query 'SecurityGroups[*].[GroupId]' --output text`
         aws ec2 authorize-security-group-ingress --group-id $sonarqube_sg_id --protocol tcp --port 9000 --cidr ${{ steps.ip.outputs.ipv4 }}/32
         echo "::set-output name=sonarqube_sg_id::$(echo $sonarqube_sg_id)"
         
    - name: Get Public IP of SonarQube and Jfrog Instance
      id: hostname
      env: 
        EC2_NAME: ${{ secrets.AWS_EC2_NAME }}
      run: |
          ec2_public_ip=`aws --region ${{ secrets.AWS_REGION }} ec2 describe-instances  --filters "Name= tag:Name,Values=$EC2_NAME" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text`
          echo "::set-output name=ec2_ip::$(echo $ec2_public_ip)"
      
    # SonarQube commands 
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar   
   
    - name: Cache Gradle packages
      uses: actions/cache@v1
      with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
          
    - name: Code Scan Analysis - SonarQube
      run: |
          ./gradlew sonar \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=http://${{ steps.hostname.outputs.ec2_ip }}:9000 \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          
    # Upload Artifact 
    - name: Upload build Directory
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: ${{ github.workspace }}/build/
        if-no-files-found: ignore
