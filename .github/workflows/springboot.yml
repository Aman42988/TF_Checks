name: SpringBoot Application CI and CD

# Only trigger, when the build workflow succeeded
on:
  repository_dispatch:
       types: [springbootworkflow]
 
 
jobs:
  build:
    permissions:
      id-token: write    # Job to connect to Identity Token to receive the token
      contents: read     # Read access to the repository
    runs-on: ubuntu-latest
       
    steps:
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v3 

      
    - name: Connecting GitHub Actions To AWS Using OIDC - Roles
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: github-actions-session
        
   # Install Java (JDK)
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
     
   # Gradle commands
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Gradle Clean
      run: ./gradlew clean
      
    - name: Gradle Build
      run: ./gradlew build
      
   # Public IP of Github Actions (SonarQube EC2)
    - name: Public IP of Github Hosted Runner
      id: ip
      uses: haythem/public-ip@v1.3
      
    - name: Add Github Actions IP to Security group
      id: sonarqube-security-group-id
      run: |
         sonarqube_sg_id=`aws ec2 describe-security-groups --group-names ${{ secrets.AWS_EC2_SG_NAME }} --query 'SecurityGroups[*].[GroupId]' --output text`
         aws ec2 authorize-security-group-ingress --group-id $sonarqube_sg_id --protocol tcp --port 9000 --cidr ${{ steps.ip.outputs.ipv4 }}/32
         echo "::set-output name=sonarqube_sg_id::$(echo $sonarqube_sg_id)"
         
    - name: Get Public IP of SonarQube and Jfrog Instance
      id: hostname
      env: 
        EC2_NAME: ${{ secrets.AWS_EC2_NAME }}
      run: |
          ec2_public_ip=`aws --region ${{ secrets.AWS_REGION }} ec2 describe-instances  --filters "Name= tag:Name,Values=$EC2_NAME" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text`
          echo "::set-output name=ec2_ip::$(echo $ec2_public_ip)"
      
    # SonarQube commands 
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar   
   
    - name: Cache Gradle packages
      uses: actions/cache@v1
      with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
          
    - name: Code Scan Analysis - SonarQube
      run: |
          ./gradlew sonarqube \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=http://${{ steps.hostname.outputs.ec2_ip }}:9000 \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          
    # Upload Artifact 
    - name: Upload build Directory
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: ${{ github.workspace }}/build/
        if-no-files-found: ignore
          
  deploy:
    permissions:
      id-token: write    # Job to connect to Identity Token to receive the token
      contents: read     # Read access to the repository
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_TAG: latest
      REGISTRY: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
       
    steps:
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v3 

      
    - name: Connecting GitHub Actions To AWS Using OIDC - Roles
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: github-actions-session
        
    # Download Artifacts
    - name : Download build Artifactory
      uses: actions/download-artifact@v3
      with:
        name: build
        path: ${{ github.workspace }}/build/
            
    - name: Display structure of downloaded files of Artifact 
      run: ls -R
      working-directory: ${{ github.workspace }}/build/
          
  # Logging into Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
  # Build, Tag and Push Docker Images to AWS ECR
    - name: Building, Tagging and Pushing Docker Image to AWS ECR
      env:
       REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
       echo ${{ steps.login-ecr.outputs.registry }}
       docker build -t spring-boot:$IMAGE_TAG .
       docker tag  spring-boot:$IMAGE_TAG $REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
       docker push $REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
        
  # Tagging and Pushing Docker images to ECR
    - name: Tagging and Pushing Docker Image to Amazon ECR
      env:
       REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker tag  spring-boot:$IMAGE_TAG $REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
             
    # Public IP of Github Actions
    - name: Public IP of Github Hosted Runner
      id: ip
      uses: haythem/public-ip@v1.3
                   
    # Security Group Id of EC2 Instance 
    - name: Get Security Group Id of EC2 Instance 
      id: ec2
      env: 
          EC2_NAME: ${{ secrets.AWS_EC2_SG_NAME }}
      run: |
         ec2_sg_id=`aws ec2 describe-security-groups --group-names $EC2_NAME --query 'SecurityGroups[*].[GroupId]' --output text`
         echo "::set-output name=ec2_security_group_id::$(echo $ec2_sg_id)"
        
    - name: Add Github Runner Instance IP to Security group
      run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ steps.ec2.outputs.ec2_security_group_id }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
    - name: Public IP of EC2 Instance
      id: hostname
      env: 
        EC2_NAME: ${{ secrets.AWS_EC2_NAME }}
      run: |
          ec2_public_ip=`aws --region ${{ secrets.AWS_REGION }} ec2 describe-instances  --filters "Name= tag:Name,Values=$EC2_NAME" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text`
          echo "::set-output name=ec2_ip::$(echo $ec2_public_ip)"
          
          
    - name: Copy K8s yaml files via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ steps.hostname.outputs.ec2_ip }}
        username: ${{ secrets.EC2_USER  }}
        key: ${{ secrets.EC2_PRIVATE_KEY  }}
        source: "spring-boot-application.yaml"
        target: "."       
    
    - name: Pulling ECR Image and Scanning Docker Images using Trivy and Uploading Trivy Reports to s3 Bucket
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ steps.hostname.outputs.ec2_ip}}
        username: ${{ secrets.EC2_USER  }}
        key: ${{ secrets.EC2_PRIVATE_KEY  }}
        port: 22
        script: |
          ls -al
          sudo apt-get update
          sudo apt-get install -y awscli
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $REGISTRY
          docker pull $REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker images
          sudo trivy image $REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG > Trivy-Report-latest.txt
          aws s3 cp Trivy-Report-latest.txt ${{ secrets.S3_TRIVY_BUCKET_PATH }}
          rm Trivy-Report-latest.txt
          
    - name: Scanning yaml files using Terrascan and Deploying SpringBoot Application in Miniube Cluster
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ steps.hostname.outputs.ec2_ip}}
        username: ${{ secrets.EC2_USER  }}
        key: ${{ secrets.EC2_PRIVATE_KEY  }}
        port: 22
        script: |
          terrascan scan > Terrascan-Report-latest.txt || echo done
          aws s3 cp Terrascan-Report-latest.txt ${{ secrets.S3_TERRASCAN_BUCKET_PATH }}
          rm Terrascan-Report-latest.txt
          kubectl apply -f spring-boot-application.yaml
          rm spring-boot-application.yaml
          
          
