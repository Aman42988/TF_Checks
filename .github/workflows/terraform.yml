name: Create resources using Terraform
 
on:
  push:
    branches: 
      - main
     
jobs:

  tflint-checks:
    runs-on: ubuntu-latest
    steps:
    
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v3  
      
    # TFLint - Terraform Check
    - uses: actions/cache@v2
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v2
      name: Setup TFLint
      with:
        github_token: ${{ secrets.CI_GITHUB_TOKEN }}
        
    # Print TFLint version
    - name: Show version
      run: tflint --version
      
    # Install plugins
    - name: Init TFLint
      run: tflint --init
      
    # Run tflint command in each directory recursively
    - name: Run TFLint
      run: tflint -f compact --recursive --force 
      
   
  tfsec-checks:
      runs-on: ubuntu-latest
      needs: tflint-checks
      
      steps:
      # Checkout Repository
      - name : Check out Git Repository
        uses: actions/checkout@v2
      
      # Tfsec - Security scanner for your Terraform code
      - name: Run Tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
           
  terraform-setup:
    permissions:
      id-token: write    # Job to connect to Identity Token to receive the token
      contents: read     # Read access to the repository
    runs-on: ubuntu-latest
    needs: tfsec-checks
       
    steps:
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v3 

      
    - name: Connecting GitHub Actions To AWS Using OIDC - Roles
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: github-actions-session
        
    # Terraform Installation
    - name : Terraform Setup
      run: |
         sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
         wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
         gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint
         echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list
         sudo apt update && sudo apt-get install -y terraform
         terraform --version
         
    - name : Terraform Init and Validate
      run: |
          cd terraform_code
          terraform init
          terraform validate  
          
    - name: Terraform Plan 
      id: plan
      run: |
         cd terraform_code
         terraform plan 
      continue-on-error: true
      
    - name: Terraform Plan Status
      if: ${{ steps.plan.outcome == 'failure' }}
      run: exit 1
      
    - name: Terraform Apply
      id: apply
      run: |
        cd terraform_code
        terraform apply -auto-approve
      continue-on-error: true
      
    - name: Terragrunt Apply Status
      if: ${{ steps.apply.outcome == 'failure' }}
      run: exit 1
      
  install-services:
    permissions:
      id-token: write    # Job to connect to Identity Token to receive the token
      contents: read     # Read access to the repository
      
    runs-on: ubuntu-latest
    needs: terraform-setup
    
    steps: 
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v3  
      
    - name: Connecting GitHub Actions To AWS Using OIDC - Roles
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: github-actions-session
        
    # Public IP of Github Actions
    - name: Public IP of Github Hosted Runner
      id: ip
      uses: haythem/public-ip@v1.3
                   
    # Security Group Id of EC2 Instance 
    - name: Get Security Group Id of EC2 Instance 
      id: ec2
      env: 
          EC2_NAME: ${{ secrets.AWS_EC2_SG_NAME }}
      run: |
         ec2_sg_id=`aws ec2 describe-security-groups --group-names $EC2_NAME --query 'SecurityGroups[*].[GroupId]' --output text`
         echo "::set-output name=ec2_security_group_id::$(echo $ec2_sg_id)"
        
    - name: Add Github Runner Instance IP to Security group
      run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ steps.ec2.outputs.ec2_security_group_id }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
    - name: Public IP of EC2 Instance
      id: hostname
      env: 
        EC2_NAME: ${{ secrets.AWS_EC2_NAME }}
      run: |
          ec2_public_ip=`aws --region ${{ secrets.AWS_REGION }} ec2 describe-instances  --filters "Name= tag:Name,Values=$EC2_NAME" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text`
          echo "::set-output name=ec2_ip::$(echo $ec2_public_ip)"
          
    - name: Copy Script files via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ steps.hostname.outputs.ec2_ip }}
        username: ${{ secrets.EC2_USER  }}
        key: ${{ secrets.EC2_PRIVATE_KEY  }}
        source: "scripts/*.sh"
        target: "."       
    
    - name: Deploy Docker Script in EC2 Instance
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ steps.hostname.outputs.ec2_ip}}
        username: ${{ secrets.EC2_USER  }}
        key: ${{ secrets.EC2_PRIVATE_KEY  }}
        port: 22
        script: |
          whoami
          ls -al
          chmod +x scripts/*.sh
          bash scripts/install-docker.sh
          bash scripts/install-sonarqube.sh
          bash scripts/install-kubectl.sh
          bash scripts/install-minikube.sh
          bash scripts/install-trivy.sh
          bash scripts/install-terrascan.sh
          rm -rf scripts
           
        
    - name: Remove Github Actions IP from security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ steps.ec2.outputs.ec2_security_group_id }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      if: always()
      
    - name: Trigger next workflow for SpringBoot 
      if: success()
      uses: peter-evans/repository-dispatch@v1
      with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: springbootworkflow
          client-payload: '{"ref":"${{ github.ref }}","sha":"${{github.sha}}"}'
