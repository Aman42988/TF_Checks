name: Terragrunt Setup
 
 on:
  push:
    branches: 
      - main
 
env:
  TERRAGRUNT_VERSION: v0.42.5
    
jobs:

  tflint-checks:
    runs-on: ubuntu-latest
    steps:
    
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v3  
      
    # TFLint - Terraform Check
    - uses: actions/cache@v2
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ${{ matrix.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v2
      name: Setup TFLint
      with:
        github_token: ${{ secrets.CI_GITHUB_TOKEN }}
        
    # Print TFLint version
    - name: Show version
      run: tflint --version
      
    # Install plugins
    - name: Init TFLint
      run: tflint --init
      
    # Run tflint command in each directory recursively
    - name: Run TFLint
      run: tflint -f compact --recursive --force 
      
   
  tfsec-checks:
      runs-on: ubuntu-latest
      needs: tflint-checks
      
      steps:
      # Checkout Repository
      - name : Check out Git Repository
        uses: actions/checkout@v2
      
      # Tfsec - Security scanner for your Terraform code
      - name: Run Tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
           
  terragrunt-setup:
    permissions:
      id-token: write    # Job to connect to Identity Token to receive the token
      contents: read     # Read access to the repository
    runs-on: ubuntu-latest
    needs: tfsec-checks
       
    steps:
    # Checkout Repository
    - name : Check out Git Repository
      uses: actions/checkout@v3 

      
    - name: Connecting GitHub Actions To AWS Using OIDC - Roles
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: github-actions-session
        
    # Terraform Installation
    - name : Terraform Setup
      run: |
         sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
         wget -O- https://apt.releases.hashicorp.com/gpg | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
         gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint
         echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list
         sudo apt update && sudo apt-get install -y terraform
         terraform --version
         
    - name : Terragrunt Validate
      run: |
          terraform validate  
          
    - name: Terragrunt Plan 
      id: plan
      run: |
       # Configuring Private SSH Keys to access Private GitHub Respository
        eval `ssh-agent -s`
        mkdir -p ~/.ssh
        ssh-keyscan github.com >> ~/.ssh/known_hosts
        ssh-add - <<< "${{ secrets.PRIVATE_SSH_KEY }}"
    
        terraform plan 
      continue-on-error: true
      
    - name: Terragrunt Plan Status
      if: ${{ steps.plan.outcome == 'failure' }}
      run: exit 1
      
    - name: Terragrunt Apply Status
      id: apply
      run: |
        terragrunt apply -auto-approve
      continue-on-error: true
      
    - name: Terragrunt Apply Status
      if: ${{ steps.apply.outcome == 'failure' }}
      run: exit 1
      
    - name: Trigger next workflow for Terragrunt 
      if: success()
      uses: peter-evans/repository-dispatch@v1
      with:
          token: ${{ secrets.CI_GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: springbootworkflow
          client-payload: '{"ref":"${{ github.ref }}","sha":"${{github.sha}}"}'
          
